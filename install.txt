                      HWGUI - Harbour GUI library

   1) Windows

   Installation procedure is very simple.

   There are few bat files to build HwGUI with C compiler of your choice:

   make_b32.bat   - Borland C
   make_pc.bat    - Pelles C
   make_vc.bat    - Microsoft Visual C
   make_w32.bat   - Open Watcom C
   makemngw.bat   - Mingw (32bit, special instructions follow above)
   makemngw64.bat - Mingw (64bit, special instructions follow above) 

   Read special build instructions for every compiler in files of directory:
   samples\dev\compiler\<compiler>\...

   Attention !
   We recommend to build Harbour, HWGUI and your application with
   same C compiler, because generated C source by hbmk2 utility could be otherwise incompatible.

   You need to set the environment variable HB_PATH, which must contain a path
   to your Harbour directory. This can be done in your Windows environment or
   by adding a line to appropriate bat file:

      SET HB_PATH=c:\harbour

   You find some sample bat files for setting environment variable in directory "samples\dev\env".

   Then run the selected bat file and you'll get hwgui.lib, hwguimt.lib ( hwgui.lib for
   multithread mode ),  procmisc.lib, hbxml.lib and hwgdebug.lib in lib/ directory.

   With Harbour you can also build libraries, using hbmk2 utility, just write:

      hbmk2 hwgui.hbp procmisc.hbp hbxml.hbp hwgdebug.hbp

   In contrib/ directory you'll find similar .bat and .hbp files for hwg_qhtm, hbactivex
   and hwg_extctrl libraries.

       To build samples you need to run appropriate .bat files, fixing environment
   variables there.
       Bld.bat should be executed with prg file name as a parameter:

   bld a


    Cross develop environment on Windows for GTK:
     (For target *NIX operating systems)

     For building an GTK version for test-
     and develop purposes you can create a
     GTK based version of HWGUI in parallel.
     Details in file
      samples\dev\MingW-GTK\Readme.txt
     Be care of the Warning mentioned in this file
     and dependent source files. 


   1.1) Special instructions for MinGW64 (x86_64):

    You can install the 64bit version of MinGW in parallel with the 32 bit release.
    You must only use the special environment settings and compile scripts for
    decision of target 32 or 64 bit.

    - Install MinGW for 64bit in directory C:\MinGW64.
    - Extract Harbour in own directory "C:\harbour64\core-master"
    - Set adapted environment as witten in script (samples\dev\path\pfad64.bat)
      for all the next steps. Modify to your own needs.
    - Build Harbour in base directory by typing "make"
    - Build HWGUI :
       makemngw64.bat
      There are lots of warnings displayed, ingore them.
      We will fix them as soon as possiblle.
    - Build a sample program (a.prg or dbview.prg) with
      build script "bldmingw64.bat".
    - Use bldmingw64.bat as template for building your HWGUI application.

    Attention !
    Not all functions of the 32 bit build are available on MinGW64.
    For details read instructions in file "samples\dev\MinGW64\MinGW64.txt"


   2) Linux

   For installation on Linux you need some prerequisites,
   they are listed at the bottom of these instructions.

   Sources for the Linux GTK version are located in the source/gtk/ directory.
   In the base directory is a shell file make_gtk.sh, which is intended for building HwGUI Linux 
   libraries. The environment variable HB_ROOT is set there, based on the 
   assumption, that HwGUI directory is within the Harbour directory. If no,
   you need to write the correct path to your Harbour directory, for example:

      export HB_ROOT=/home/me/harbour

   Then just run the script
     ./make_gtk.sh -hb
   and four libraries must appear in the lib/ directory:

      libhbxml.a
      libhwgui.a
      libhwgdebug.a
      libprocmisc.a

   For xHarbour platform set first parameter to "-xhb".    

   You will find few samples in samples/gtk_samples directory and a shell file 
    ./build.sh <prg file>.
   The environment variable HB_ROOT is set there, based on the assumption, that
   HwGUI directory is within the Harbour directory. If no, you need to write the
   correct path to your Harbour directory.
   Some samples in the directory samples are ready for LINUX/GTK, look into the Readme.txt file.

   As alternative method use the hbmk2 utility, it works also at it's best.
   Start the script "./make_hbmk.sh" to run the HWGUI build with hbmk2.


 
   3) Common instructions to build samples, utils and your application
      (for all operating systems)

   Easier way to build HWGUI applications is to use the "hbmk2" utility of Harbour.
   Write an *.hbp file and run for example:
   hbmk2 myapp.hbp

   You find samples of *.hbp files in the utils and samples directory.  

   Other way is to create list of all modules in the main program with "SET PROCDURE TO ..."
   (be care of case sensitivity on UNIX/LINUX)
   and write a bat or shell script with only one active line (for example on Windows): 
    hbmk2 <main.prg> <main.rc> -I%HWGUI_INSTALL%\include -L%HWGUI_INSTALL%\lib -lhwgui -lprocmisc -lhbxml -lhwgdebug -gui
   (-gui option only for windows necessary, for LINUX add options -d__LINUX__ -d__GTK__ , no *.rc files )
  

   3.1) Resources
   Resources means forms, images and icons in GUI applications.
   They could be loaded directly from an single image or resource file (*.rc)
   and compiled directly into the exe file.
   If loading a lot of image files at run time, you must deliver them all with your
   setup script. This is uncomfortable. You can use the Windows resource
   compiler utility (HWGUI supports this), but for multi platform programs
   you must avoid the resource compiler. With MinGW the source compiler is "windres.exe".
   The resource compiler is not available on GTK/LINUX !
   But there are alternatives:
   1.) The Binary Container,
   2.) Hex value resources,
   3.) HWGUI designer for forms.
   Read more about this topic in file
   "utils/bincnt/Readme.txt".
   Creating and editing forms use the HWGUI utility "Designer"
   in directory "utils/designer". 
  

 List of packages for Ubuntu Linux and LinuxMINT
 -----------------------------------------------
  
  Install packages as system administrator:
  
  LinuxMINT:
  
   sudo apt-get install build-essential linux-headers-generic dkms
   sudo apt-get install libgtk2.0-dev
   sudo apt install wmctrl  *1)
   
   Ubuntu 18:
   
   sudo apt-get install linux-headers-generic
   sudo apt-get install libgtk2.0-dev
   sudo apt install wmctrl  *1)
   
 
  
   Optional for all distributions (resolve dependencies), install them, if needed:
    sudo apt-get install libxmu-dev libxaw7-dev libxt-dev
   
  For higher security and easier development we recommend a "non root" installation
  of Harbour and HWGUI (You can ever use the newest code snapshot of Harbour and HWGUI).

  
  To avoid the Gtk-WARNING "Unable to locate theme engine in module_path: "adwaita":
    sudo apt-get install gnome-themes-standard
   
   *1) This is necessary for set focus on progress bars, see sample program
       "samples/gtk_samples/progbars.prg". 


  1.) You need some entries in the .profile in the home directory of the desired
      userid (sample):

   # --- Harbour and HWGUI --
   HARBOUR_INSTALL=$HOME/Harbour/core-master
   PATH=$PATH:$HARBOUR_INSTALL/bin/linux/gcc
   export PATH
   LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HARBOUR_INSTALL/lib/linux/gcc
   export LD_LIBRARY_PATH
   #  
  
   Modify the path entries to your own needs.
   
   Login to this userid new after modification, so that the
   entries become valid.
 
 
   2.) Build Harbour
   Get the recent code snapshot and build Harbour following the installation instructions.
   If Harbour was build complete, it is ready for HWGUI.
   Some error messages appeared because of missing dependencies, ignore them.
   Take care of them, if referenced Harbour extensions are used by your application.    

   
   3.) Build HWGUI following instructions above.

   Now you should be able to build your application. 

* =============== EOF of install.txt ====================
 
 
