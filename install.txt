                      HWGUI - Harbour GUI library

   1) Windows

   Installation procedure is very simple.

   There are few bat files to build HwGUI with C compiler of your choice:

   make_b32.bat  - Borland C
   make_pc.bat   - Pelles C
   make_vc.bat   - Microsoft Visual C
   make_w32.bat  - Open Watcom C
   makemngw.bat  - Mingw

   You need to set the environment variable HB_PATH, which must contain a path
   to your Harbour directory. This can be done in your Windows environment or
   by adding a line to appropriate bat file:

      SET HB_PATH=c:\harbour

   Then run the selected bat file and you'll get hwgui.lib, hwguimt.lib ( hwgui.lib for
   multithread mode ),  procmisc.lib, hbxml.lib and hwgdebug.lib in lib/ directory.

   With Harbour you can also build libraries, using Hbmk2 utility, just write:

      hbmk2 hwgui.hbp procmisc.hbp hbxml.hbp hwgdebug.hbp

   In contrib/ directory you'll find similar .bat and .hbp files for hwg_qhtm, hbactivex
   and hwg_extctrl libraries.

       To build samples you need to run appropriate .bat files, fixing environment
   variables there.
       Bld.bat should be executed with prg file name as a parameter:

   bld a


    Cross develop environment on Windows for GTK:
     (For target *NIX operating systems)

     For building an GTK version for test-
     and develop purposes you can create a
     GTK based version of HWGUI in parallel.
     Details in file
      samples\dev\MingW-GTK\Readme.txt
     Be care of the Warning mentioned in this file
     and dependent source files. 


   2) Linux

   For installation on Linux you need some prerequisites,
   they are listed at the bottom of these instructions.

   Sources for the Linux GTK version are located in the source/gtk/ directory. 
   There is a shell file build.sh, which is intended for building HwGUI Linux 
   libraries. The environment variable HB_ROOT is set there, based on the 
   assumption, that HwGUI directory is within the Harbour directory. If no,
   you need to write the correct path to your Harbour directory, for example:

      export HB_ROOT=/home/me/harbour

        Then just run the build.sh and four libraries must appear in the lib/ directory:

      libhbxml.a
      libhwgui.a
      libhwgdebug.a
      libprocmisc.a

   You will find few samples in samples/gtk_samples directory and a shell file build.sh.
   The environment variable HB_ROOT is set there, based on the assumption, that
   HwGUI directory is within the Harbour directory. If no, you need to write the
   correct path to your Harbour directory.



 List of packages for Ubuntu Linux and LinuxMINT
 -----------------------------------------------
  
  Install packages as system administrator:
  
  LinuxMINT:
  
   sudo apt-get install build-essential linux-headers-generic dkms
   sudo apt-get install libgtk2.0-dev
   
   Ubuntu 18:
   
   sudo apt-get install linux-headers-generic
   sudo apt-get install libgtk2.0-dev
 
  
   Optional for all distributions (resolve dependencies), install them, if needed:
    sudo apt-get install libxmu-dev libxaw7-dev libxt-dev
   
  For higher security and easier development we recommend a "non root" installation
  of Harbour and HWGUI (You can ever use the newest code snapshot of Harbour and HWGUI).


  1.) You need some entries in the .profile in the home directory of the desired
      userid (sample):

   # --- Harbour and HWGUI --
   HARBOUR_INSTALL=$HOME/Harbour/core-master
   PATH=$PATH:$HARBOUR_INSTALL/bin/linux/gcc
   export PATH
   LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HARBOUR_INSTALL/lib/linux/gcc
   export LD_LIBRARY_PATH
   #  
  
   Modify the path entries to your own needs.
   
   Login to this userid new after modification, so that the
   entries become valid.
 
 
   2.) Build Harbour
   Get the recent code snapshot and build Harbour following the installation instructions.
   If Harbour was build complete, it is ready for HWGUI.
   Some error messages appeared because of missing dependencies, ignore them.
   Take care of them, if referenced Harbour extensions are used by your application.    

   
   3.) Build HWGUI following instructions above.

   Now you should be able to build your application.  
 
